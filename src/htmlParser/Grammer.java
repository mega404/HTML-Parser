/* Generated By:JavaCC: Do not edit this line. Grammer.java */
package htmlParser;
import java.io.*;
import save.HtmlFileManager;

public class Grammer implements GrammerConstants {
  static String textHtml = "";

  static String wordFont = "";

  static String wordColor = "";

  static String wordLink = "";

  static boolean decoratedFlag = false;

  public static void main(String [] args) throws Exception
  {
    Grammer grammer = new Grammer(System.in);
    Grammer.input();
  }

  static final public String input() throws ParseException, Exception {
  Token and, create, element, sentence, sentence2;
  String output = "";
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMAND:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      create = jj_consume_token(COMMAND);

      if (!create.image.equals("ADD"))
      {
        HtmlFileManager.create(output, "template.html");
        break;
      }
      element = jj_consume_token(ELEMENT);

      String e = element.image;
      textHtml = "";
      wordFont = "";
      wordLink = "";
      wordColor = "";
      if (e.equals("IMAGE"))
      {
        String text = img();
        text += "\u005cn";
        output += text;
      }
      else if (e.equals("PARAGRAPH") || e.equals("HEADING"))
      {
        String text = "";
        if (e.equals("PARAGRAPH"))
        {
          text += "<p ";
        }
        else
        {
          text += "<h1 ";
        }
        text += paragraph();
        if (e.equals("PARAGRAPH"))
        text += "</p>\u005cn";
        else
        text += "</h1>\u005cn";
        output += text;
      }
      else if (e.equals("LINK"))
      {
        String text = link();
        text += "\u005cn";
        output += text;
        //  link();
      }
      else
      {
        break;
      }
    }
    jj_consume_token(0);
    {if (true) return output;}
    throw new Error("Missing return statement in function");
  }

  static final public String img() throws ParseException {
  Token t;
  String hTML = "";
    t = jj_consume_token(IMAGE);

    String [ ] temp = t.image.split(" ", 3);
    hTML += "<img src=\u005c"";
    hTML += temp [ 2 ].substring(1, temp [ 2 ].length() - 1);
    hTML += "\u005c"/>";
    // System.out.println(wordWithHTML);

    {if (true) return hTML;}
    throw new Error("Missing return statement in function");
  }

  static final public String paragraph() throws ParseException {
  Token t, sen;
  String hTML = "";
    handle_decorated_text();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECORATED_TEXT:
      case AND:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        jj_consume_token(AND);


      }
      handle_decorated_text();
    }
    // hTML +="<p ";
    if (wordColor.length() != 0 || wordFont.length() != 0)
    {
      hTML += "style=\u005c"";
      if (wordColor.length() != 0)
      {
        hTML += "color:";
        hTML += wordColor;
        hTML += ";";
      }
      if (wordFont.length() != 0)
      {
        hTML += "font-family:";
        hTML += wordFont;
        hTML += ";";
      }
      hTML += "\u005c"";
    }
    hTML += ">";
    hTML += textHtml;
    //hTML += "</p>";
    {if (true) return hTML;}
    throw new Error("Missing return statement in function");
  }

  static final public void handle_decorated_text() throws ParseException {
  Token t;
    t = jj_consume_token(DECORATED_TEXT);
    String s;
    decoratedFlag = true;
    s = t.image;
    String [ ] arrOfStr = s.split(" ", 3);
    String w = arrOfStr [ 1 ];
    String demo = arrOfStr [ 2 ];
    if (w.equals("FONT"))
    {
      wordFont += demo.substring(1, demo.length() - 1);
      // System.out.println(wordFont);
    }
    else if (w.equals("COLOR"))
    {
      wordColor += demo.substring(1, demo.length() - 1);
      // System.out.println(wordColor);
    }
    else if (w.equals("TEXT"))
    {
      String [ ] temp = s.split(" ", 3);
      textHtml += temp [ 2 ].substring(1, temp [ 2 ].length() - 1);
    }
  }

  static final public String link() throws ParseException {
  Token t = null, sen, and;
  String hTML = "", s;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINK:
        t = jj_consume_token(LINK);
        break;
      case DECORATED_TEXT:
        handle_decorated_text();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }

      if(!decoratedFlag)
      {
        decoratedFlag = false;
         s = t.image;
      String [ ] mm = s.split(" ", 3);
      wordLink = mm [ 2 ];
      }
      decoratedFlag = false;
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        jj_consume_token(AND);


      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECORATED_TEXT:
      case LINK:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
    }
    hTML += "<a href=";
    hTML += wordLink;
    if (wordColor.length() != 0 || wordFont.length() != 0)
    {
      hTML += " style=\u005c"";
      if (wordColor.length() != 0)
      {
        hTML += "color:";
        hTML += wordColor;
        hTML += ";";
      }
      if (wordFont.length() != 0)
      {
        hTML += "font-family:";
        hTML += wordFont;
        hTML += ";";
      }
      hTML += "\u005c"";
    }
    hTML += ">";
    hTML += textHtml;
    hTML += "</a>";
    {if (true) return hTML;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GrammerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x41000,0x40000,0x3000,0x40000,0x3000,};
   }

  /** Constructor with InputStream. */
  public Grammer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Grammer(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GrammerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Grammer(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GrammerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Grammer(GrammerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GrammerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
